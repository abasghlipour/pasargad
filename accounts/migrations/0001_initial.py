# Generated by Django 5.0.3 on 2024-06-23 19:40

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import iranian_cities.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('iranian_cities', '0005_remove_bakhsh_ostan_remove_bakhsh_shahrestan_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Otp_Code',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=11, unique=True, verbose_name='شماره تلفن')),
                ('code', models.IntegerField(unique=True)),
                ('created', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'کد احراز هویت',
                'verbose_name_plural': 'کدهای احراز هویت',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=11, unique=True, verbose_name='شماره تلفن')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='ایمیل')),
                ('name', models.CharField(blank=True, max_length=300, null=True, verbose_name='نام')),
                ('family_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='نام خانوادگی')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='عکس پروفایل')),
                ('state', models.CharField(blank=True, max_length=300, null=True, verbose_name='استان')),
                ('city', models.CharField(blank=True, max_length=300, null=True, verbose_name='شهر')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('is_admin', models.BooleanField(default=False, verbose_name='ادمین')),
                ('is_staff', models.BooleanField(default=False, verbose_name='کارمند')),
                ('is_seller', models.BooleanField(default=False, verbose_name='فروشنده')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProvinceAndCity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', iranian_cities.fields.ShahrField(on_delete=django.db.models.deletion.CASCADE, to='iranian_cities.shahr')),
                ('province', iranian_cities.fields.OstanField(on_delete=django.db.models.deletion.CASCADE, to='iranian_cities.ostan')),
            ],
        ),
    ]
